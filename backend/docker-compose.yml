version: "3"

services:
  redis:
    container_name: "redis"
    image: "redis:alpine"
    restart: always
    command: redis-server --appendonly yes --replica-read-only no
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - ./.env
    volumes:
      - redis_data:/data
    networks:
      - panel_ziro

  pg_fixPermissions:
    image: "bitnami/postgresql:14"
    user: root
    command: chown -R 1001:1001 /bitnami/postgresql
    volumes:
      - pg_data:/bitnami/postgresql/data
    networks:
      - panel_ziro

  postgres:
    image: "bitnami/postgresql:14"
    restart: always
    container_name: "pg"
    env_file:
      - ./.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - pg_data:/bitnami/postgresql/data
    depends_on:
      - pg_fixPermissions
    networks:
      - panel_ziro

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    container_name: "rabbitmq_ziro"
    restart: always
    env_file:
      - ./.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq/log
    networks:
      - panel_ziro

  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    container_name: "api"
    env_file:
      - ./.env
    stdin_open: true
    tty: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - redis
      - postgres
      - rabbitmq
    ports:
      - "3100:3100"
    volumes:
      - wwebjs_auth:/app/.wwebjs_auth
      - medias:/app/public
    networks:
      - panel_ziro

networks:
  panel_ziro:
    driver: bridge

volumes:
  redis_data:
  pg_data:
  rabbitmq_data:
  rabbitmq_logs:
  wwebjs_auth:
  medias:
